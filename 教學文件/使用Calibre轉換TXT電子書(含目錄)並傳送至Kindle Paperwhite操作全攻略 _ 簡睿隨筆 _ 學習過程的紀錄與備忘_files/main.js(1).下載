// This is called before we start the createjs stage, so we can add assets in the animate library dynamically

var isSecondaryFontUsed = false;

// Need Change for each size format
var widthPictFormat = 330;
var heightPictFormat = 260;

function InjectDynamicAssets(lib, img, cjs) {
    var _dynProps = lib.properties.dynamic;
    var _dynData = airfrance.Logic.dynamizer.getDynData();
    var _locData = airfrance.Logic.dynamizer.getLocData();
    var _scenario = airfrance.Logic.dynamizer.getScenario();
    var _config = airfrance.Logic.dynamizer.getConfig();

    var resultText = {};
    var datas = {
        city: getAirportLabel(_dynData.departureAirportCode),
        DestCity: getAirportLabel(_dynData.destinationAirportCode),
        fare: '',
        date: _dynData.untilDate
    };

    var template = Handlebars.compile(_locData.departing_from);
    resultText.departing_from = template(datas);

    template = Handlebars.compile(_locData.price_from);
    resultText.price_from = template(datas);

    if ('untilDate' in _dynData) {
        var langDate = navigator.languages ? navigator.languages[0] : (navigator.language || navigator.userLanguage);
        var _m = moment.unix(_dynData.untilDate);
        _m.locale(langDate.toLowerCase());
        datas.date = _m.format('L');

        template = Handlebars.compile(_locData.book_until);
        resultText.book_until = template(datas).toUpperCase();
    } else {
        resultText.book_until = '';
    }

    resultText.cta_click_here = _locData.cta_click_here.toUpperCase();
    resultText.see_conditions = _locData.see_conditions.toUpperCase();
    resultText.taxes_inc = _locData.taxes_inc.toUpperCase();
    resultText.terms = _locData['terms_' + _config.scenario] || _locData.terms;

    resultText.rmkt_txt_anim = ('rmkt_txt_anim' in _locData) ? _locData.rmkt_txt_anim : '';
    resultText.rmkt_txt_screen_one = ('rmkt_txt_screen_one' in _locData) ? _locData.rmkt_txt_screen_one : '';
    resultText.rmkt_txt_screen_two = ('rmkt_txt_screen_two' in _locData) ? _locData.rmkt_txt_screen_two : '';

    if ('intro_text_' + _config.scenario in _locData) {
        template = Handlebars.compile(_locData['intro_text_' + _config.scenario]);
        resultText.intro_text_title = ('intro_text_' + _config.scenario in _locData) ? template(datas).toUpperCase() : ' ';
    } else if ('intro_text_' + _config.theme in _locData) {
        template = Handlebars.compile(_locData['intro_text_' + _config.theme]);
        resultText.intro_text_title = ('intro_text_' + _config.theme in _locData) ? template(datas).toUpperCase() : ' ';
    }

    lib.properties.dynamic = {

        // currency parameters
        textCurrency: _dynData.flights[0].Currency,

        textAti: getArLabel() + ' ' + resultText.taxes_inc, // TTC A/R
        currencyIsBefore: getCurrencyIsBefore(),
        asianFromPosition: getIsAsianPosition(),

        // common texts
        textFromPrice: resultText.price_from.trim(),
        textAirport: resultText.departing_from.trim(),
        textCTA: resultText.cta_click_here.trim(),
        textConditions: resultText.book_until.trim() + '\n' + resultText.see_conditions.trim(),

        textConditionsScreen: resultText.terms.trim(),

        // Animation Place
        textReserved: resultText.rmkt_txt_anim.trim(),
        textAnimationPlaceContent1: resultText.rmkt_txt_screen_one.trim(),
        textAnimationPlaceContent2: resultText.rmkt_txt_screen_two.trim(),
        introTextTitle: resultText.intro_text_title,

        scenario: []
    };

    lib.properties.dynamic.fonts = lib.properties.dynamic.fonts || {};

    if (isSecondaryFontUsed) { lib.properties.dynamic.fonts['Excellence In Motion V2'] = 'Arial'; }

    if (!_config.debug) {
        // for (var typeName in build_scenario.scenarioDatas) {
        var nbIdImg = 0;

        for (var j = 0; j < build_scenario.scenarioDatas.length; j++) {
            var cellScenarData = build_scenario.scenarioDatas[j];

            console.log('typeName : ' + cellScenarData.type);
            nbIdImg = Math.max(0, Math.min(_dynData.flights.length - 1, nbIdImg));
            var flightData = _dynData.flights[nbIdImg];
            var pantoneFlight = (_scenario.visualSetup_ == airfrance.DestinationScenario.THREE_VISUALS) ? _dynData.flights[nbIdImg] : _dynData.flights[0];
            var pantonePosition = (_scenario.visualSetup_ == airfrance.DestinationScenario.THREE_VISUALS) ? '1' : flightData.Position;

            var colorForeground = cellScenarData.force_main_colors ? _config.themeColors.foreground : pantoneFlight['Pantone_Pos' + pantonePosition + '_A'];
            var colorBackground = cellScenarData.force_main_colors ? _config.themeColors.background : pantoneFlight['Pantone_Pos' + pantonePosition + '_B'];

            switch (cellScenarData.type) {
                case 'intro':
                    lib.properties.dynamic.scenario.push({
                        type: _config.typeViews.intro,
                        foreground: colorForeground,
                        background: colorBackground
                    });
                    break;

                case 'introTextTitle':
                case 'ohlalaTitle':
                    lib.properties.dynamic.scenario.push({
                        type: _config.typeViews.title,
                        foreground: colorForeground,
                        background: colorBackground
                    });
                    break;

                case 'image':
                case 'textImage':
                case 'ohlalaImage':



                    var images = JSON.parse(flightData['Dest_Image_' + _config.size]);
                    var imageSrc = images[_config.scenario] || images[_config.theme];

                    if (_scenario.visualSetup_ == airfrance.DestinationScenario.THREE_VISUALS || flightData.Position == '1') {
                        InjectImageAsset(imageSrc, 'picture_' + flightData.Position, widthPictFormat, heightPictFormat);
                        console.log("## InjectImageAsset ##");
                        lib.properties.dynamic.scenario.push({
                            type: _config.typeViews.image,
                            foreground: colorForeground,
                            background: colorBackground,
                            image: 'picture_' + flightData.Position
                        });
                    }

                    // nbIdImg++;
                    break;

                case 'destination':
                case 'ohlalaDestination':

                    var moneyFormat = { symbol: '', thousand: _dynData.thousandsSep, precision: 0 };

                    lib.properties.dynamic.scenario.push({
                        type: _config.typeViews.destination,
                        foreground: colorForeground,
                        background: colorBackground,
                        textTitle: getAirportLabel(flightData.Destination),
                        textPrice: accounting.formatMoney(flightData.Price, moneyFormat)
                    });
                    nbIdImg++;
                    break;

                case 'summary':
                case 'ohlalaSummary':
                    lib.properties.dynamic.scenario.push({
                        type: _config.typeViews.summary,
                        foreground: colorForeground,
                        background: colorBackground
                    });
                    break;

                default:
                    throw new Error('Unknown type ' + cellScenarData.type);
            }
        }

        console.log(lib.properties.dynamic.scenario);
    }

    if (_config.debug) {
        if (_config.scenario.indexOf('retargetingsearch') === -1) {
            if (_config.scenario.indexOf('ohlala') !== -1) {
                InjectImageAsset('https://s0.2mdn.net/ads/richmedia/studio/45521296/picture_paris_ohlala_300x250.jpg', 'picture_un', widthPictFormat, heightPictFormat);
            } else {
                InjectImageAsset('https://s0.2mdn.net/ads/richmedia/studio/37721882/300x250Espagne.jpg', 'picture_un', widthPictFormat, heightPictFormat);
                InjectImageAsset('https://s0.2mdn.net/ads/richmedia/studio/37721882/picture_paris_2016_330x260.jpg', 'picture_deux', widthPictFormat, heightPictFormat);
                InjectImageAsset('https://s0.2mdn.net/ads/richmedia/studio/37721882/300x250_Londres.jpg', 'picture_trois', widthPictFormat, heightPictFormat);
            }
        }

        lib.properties.dynamic = {
            // currency parameters
            textCurrency: '$',

            textAti: 'ALL INC. R/T', // TTC A/R
            currencyIsBefore: true,
            asianFromPosition: false,

            // common texts
            textFromPrice: 'FROM',
            textAirport: 'DEPARTING FROM NEW YORK',
            textCTA: 'BOOK NOW',
            textConditions: 'BOOK UNTIL 12\/10\/2017\nSEE CONDITIONS',
            textConditionsScreen: 'Terms and conditions apply\nCredit cards surcharge applies\nFares subject to change\n40 days advanced purchase',

            /* ToDo */
            textReserved: 'Réservé',
            textAnimationPlaceContent1: 'Chic !\nIl en reste une !\nEt demain ?',
            textAnimationPlaceContent2: 'Réservez vite !',

            introTextTitle: 'FRENCH CLICK',

            scenario: _config.scenarioDatas
        };
    } // end isDebug

    function InjectImageAsset(src, id, width, height) {
        lib.properties.manifest.push({ src: src, id: id });

        var p;
        (lib[id] = function() {
            this.initialize(img[id]);
        }).prototype = p = new cjs.Bitmap();
        p.nominalBounds = new cjs.Rectangle(0, 0, width, height);
    }
}

function getArLabel() {
    var _dynData = airfrance.Logic.dynamizer.getDynData();
    var _locData = airfrance.Logic.dynamizer.getLocData();
    if (_dynData.flights[0].A_R) {
        return _locData.round_trip;
    } else {
        return _locData.simple_trip;
    }
}

function getAirportLabel(code) {
    var _locData = airfrance.Logic.dynamizer.getLocData();
    return _locData[code];
}

var getLocById = function(id) {
    return airfrance.Logic.dynamizer.getLocData()[id];
};

function getCurrencyIsBefore() {
    var _dynData = airfrance.Logic.dynamizer.getDynData();
    var priceFormat = _dynData.priceFormat.replace(/\s/g, '');

    var res = false;
    if (priceFormat == '%s%v') res = true;

    return res;
}

function getIsAsianPosition() {
    return airfrance.Logic.dynamizer.getIsAsianPosition_();
}

function Main(root) {
    this.root = root;

    var totalDuration;
    var currentModuleIndex;
    var modules;
    var duration;
    var loop;
    var currentWaitForLabelInterval;
    var mainAnim;
    var contentMarge;
    var topMarge;
    var bottomMarge;
    var freezeInterval;

    var isConditionsShown;
    var isFrozen;

    this.Init = function() {
        isOnFirefox = navigator.userAgent.indexOf('Firefox/') != -1;

        currentModuleIndex = 0;
        modules = new Array();
        duration = 0;
        loop = 0;
        currentWaitForLabelInterval = -1;
        contentMarge = 40;
        topMarge = 31;
        bottomMarge = 10;
        isConditionsShown = false;
        isFrozen = false;

        /* Js Template */
        var _aManifest = ['js/introTextModule.js', 'js/introModule.js', 'js/imageModule.js', 'js/priceModule.js', 'js/endshotModule.js', 'js/ohlalaTitleModule.js'];

        if (window.Enabler != undefined) {
            for (var key in _aManifest) { _aManifest[key] = Enabler.getUrl(_aManifest[key]); }
        }

        Utils.LoadScripts(_aManifest, ScriptsLoaded);
    };

    function ScriptsLoaded() {
        AddContent();

        stage.enableMouseOver();
        mainAnim.btnClickThrough.addEventListener('click', OnClickThrough);
        mainAnim.btnConditions.addEventListener('click', OnClickConditions);
        mainAnim.btnConditions.addEventListener('mouseover', OnOverConditions);

        loop = 1;
        totalDuration = duration * 2;
        console.log('duration :', duration, 'totalDuration :', totalDuration, 'loop :', loop);

        freezeInterval = setInterval(function() {
            Freeze();
        }, totalDuration * 1000);

        ShowCurrentModule();
        setPixelImpression();
    }

    function AddContent() {
        totalDuration = 30;

        var dynamic = lib.properties.dynamic;
        var destinations = [];
        var pastBackgroundColor;

        AddMainAnim(dynamic.textConditionsScreen.toUpperCase());

        for (var i in dynamic.scenario) {
            var module = dynamic.scenario[i];

            switch (module.type) {
                case 'intro':
                    AddIntroModule(module.foreground, module.background);
                    break;

                case 'ohlalaImage':
                case 'image':
                    AddImageModule(module.foreground, module.background, pastBackgroundColor, module.image);
                    break;

                case 'ohlalaDestination':
                case 'destination':
                    destinations.push({
                        textTitle: module.textTitle.toUpperCase(),
                        textPrice: module.textPrice.toUpperCase()
                    });

                    AddPriceModule(
                        module.foreground,
                        module.background, {
                            textTitle: module.textTitle.toUpperCase(),
                            textPrice: module.textPrice.toUpperCase(),
                            textCurrency: dynamic.textCurrency.toUpperCase(),
                            textAti: dynamic.textAti.toUpperCase(),
                            currencyIsBefore: dynamic.currencyIsBefore,
                            asianText: dynamic.asianFromPosition
                        },
                        dynamic.textFromPrice.toUpperCase(),
                        dynamic.textAirport.toUpperCase(),
                        dynamic.textCTA.toUpperCase(),
                        dynamic.textConditions.toUpperCase(),
                        module.type === 'ohlalaDestination',
                        airfrance.Logic.dynamizer.config_.scenario === 'frenchclick' ? dynamic.introTextTitle.toUpperCase() : null
                    );
                    break;

                case 'ohlalaSummary':
                case 'summary':
                    AddEndshotModule(
                        module.foreground,
                        module.background,
                        destinations.map(function(d) {
                            return {
                                textTitle: d.textTitle.toUpperCase(),
                                textPrice: d.textPrice.toUpperCase(),
                                textCurrency: dynamic.textCurrency.toUpperCase(),
                                currencyIsBefore: dynamic.currencyIsBefore,
                                asianText: dynamic.asianFromPosition
                            };
                        }),
                        dynamic.textFromPrice.toUpperCase(),
                        dynamic.textAti.toUpperCase(),
                        dynamic.textAirport.toUpperCase(),
                        dynamic.textCTA.toUpperCase(),
                        dynamic.textConditions.toUpperCase(),
                        module.type === 'ohlalaSummary',
                        airfrance.Logic.dynamizer.config_.scenario === 'frenchclick' ? dynamic.introTextTitle.toUpperCase() : null
                    );
                    destinations.length = 0; // reset destinations, if you want you could have another set of destinations and another summary
                    break;

                case 'ohlalaTitle':
                    AddOhlalaTitleModule(module.foreground, module.background);
                    break;

                case 'introTextTitle':
                    AddIntroTextTitleModule(module.foreground, module.background, { introTextTitle: dynamic.introTextTitle });
                    break;

                case 'animationPlace':
                    AddAnimationPlaceModule(
                        module.foreground,
                        module.background,
                        pastBackgroundColor,
                        dynamic.textReserved.toUpperCase(),
                        dynamic.textAnimationPlaceContent1.toUpperCase(),
                        dynamic.textAnimationPlaceContent2.toUpperCase()
                    );
                    break;

                default:
                    throw new Error('No suitable module found for type ' + module.type);
            }
            pastBackgroundColor = module.background;
        }
    }

    function AddMainAnim(text) {
        mainAnim = new lib.MainAnim();
        root.addChild(mainAnim);

        var mcTextLegals = mainAnim.screenConditions.textConditions;
        var textLegals = mainAnim.screenConditions.textConditions.text;

        Utils.SetText(mainAnim.screenConditions.textConditions.text, text, isOnFirefox ? 3 : 0);

        mainAnim.screenConditions.textConditions.text.lineWidth = stage.canvas.clientWidth - contentMarge;

        var bounds = mainAnim.screenConditions.textConditions.text.getBounds();

        var lineWidth = bounds.width;
        var scale = Math.min(1, (stage.canvas.clientWidth - contentMarge) / lineWidth);
        mcTextLegals.scaleX = mcTextLegals.scaleY = scale;

        var heightMax = stage.canvas.clientHeight - topMarge - bottomMarge;
        mainAnim.screenConditions.textConditions.y = topMarge + parseInt((heightMax - bounds.height) * 0.5);
    }

    function AddIntroModule(headerColor, backgroundColor) {
        var module = new IntroModule(headerColor, backgroundColor);
        modules.push({ module: module, isEndShot: false, canShowConditions: false });
    }

    function AddImageModule(headerColor, backgroundColor, pastBackgroundColor, image_id) {
        var module = new ImageModule(headerColor, backgroundColor, pastBackgroundColor, image_id);
        duration += Utils.GetDuration(module.asset);
        modules.push({ module: module, isEndShot: false, canShowConditions: false });
    }

    function AddPriceModule(headerColor, backgroundColor, priceLine, textFromPriceContent, textFromContent, textCtaContent, textConditionsContent, isOhlala, textTitle) {
        var module = new PriceModule(headerColor, backgroundColor, priceLine, textFromPriceContent, textFromContent, textCtaContent, textConditionsContent, contentMarge, isOhlala, textTitle);
        duration += Utils.GetDuration(module.asset);
        modules.push({ module: module, isEndShot: false, canShowConditions: true });
    }

    function AddEndshotModule(headerColor, backgroundColor, priceLines, textFromPriceContent, textAtiContent, textFromContent, textCtaContent, textConditionsContent, isOhlala, textTitle) {
        var module = new EndshotModule(headerColor, backgroundColor, priceLines, textFromPriceContent, textAtiContent, textFromContent, textCtaContent, textConditionsContent, contentMarge, isOhlala, textTitle);
        duration += Utils.GetDuration(module.asset);
        modules.push({ module: module, isEndShot: true, canShowConditions: true });
    }

    function AddOhlalaTitleModule(headerColor, backgroundColor) {
        var module = new OhlalaTitleModule(headerColor, backgroundColor);
        duration += Utils.GetDuration(module.asset);
        modules.push({ module: module, isEndShot: false, canShowConditions: false });
    }

    function AddIntroTextTitleModule(headerColor, backgroundColor, textsContent) {
        var module = new IntroTextTitleModule(headerColor, backgroundColor, textsContent, contentMarge);
        duration += Utils.GetDuration(module.asset);
        modules.push({ module: module, isEndShot: false, canShowConditions: false });
    }

    function AddAnimationPlaceModule(headerColor, backgroundColor, pastBackgroundColor, textReserved, textContent1, textContent2) {
        var module = new AnimationPlaceModule(headerColor, backgroundColor, pastBackgroundColor, textReserved, textContent1, textContent2);
        duration += Utils.GetDuration(module.asset);
        modules.push({ module: module, isEndShot: false, canShowConditions: false });
    }

    function ShowCurrentModule() {
        var currentModule = modules[currentModuleIndex].module.asset;
        var isEndShot = modules[currentModuleIndex].isEndShot;
        mainAnim.modulesHolder.addChild(currentModule);

        currentModule.gotoAndPlay('show');
        if (currentModule.strokes != null) currentModule.strokes.gotoAndPlay('show');
        if (currentModule.content != null) currentModule.content.gotoAndPlay('show');
        if (currentModule.sides != null) { isEndShot ? currentModule.sides.gotoAndPlay('hide') : currentModule.sides.gotoAndPlay('show'); }

        if (currentWaitForLabelInterval != -1) {
            clearInterval(currentWaitForLabelInterval);
            currentWaitForLabelInterval = -1;
        }

        currentWaitForLabelInterval = Utils.WaitForLabel(currentModule, 'shown', NextModule);
    }

    function NextModule() {
        ++currentModuleIndex;
        if (currentModuleIndex >= modules.length) {
            --currentModuleIndex;
            if (loop == 0) { return; }

            --loop;
            currentModuleIndex = 0;
        }

        if (currentModuleIndex > 1) { mainAnim.modulesHolder.removeChildAt(0); }

        ShowCurrentModule();
    }

    function Freeze() {
        if (isFrozen) { return; }

        console.log('Freeze');

        isFrozen = true;
        clearInterval(freezeInterval);

        currentModuleIndex = modules.length - 1;
        var currentModule = modules[currentModuleIndex].module.asset;
        mainAnim.modulesHolder.addChild(currentModule);
        currentModule.gotoAndStop('shown');

        for (var a = 0; a < root.numChildren; ++a) { mainAnim.modulesHolder.removeChildAt(0); }

        if (currentWaitForLabelInterval != -1) {
            clearInterval(currentWaitForLabelInterval);
            currentWaitForLabelInterval = -1;
        }
    }

    function setPixelImpression() {
        airfrance.Logic.dynamizer.setPixelImpression();
    }

    function OnClickThrough() {
        if (isConditionsShown) {
            OnOutConditions();
            return;
        } else {
            Freeze();
        }

        // console.log("#### EXIT ####");
        Enabler.exitOverride('Default_Exit', airfrance.Logic.dynamizer.getClickThrough());
    }

    function OnClickConditions() {
        if (!isConditionsShown) {
            if (modules[currentModuleIndex].canShowConditions) { OnOverConditions(); } else { Freeze(); }
        } else {
            OnOutConditions();
        }
    }

    function OnOverConditions() {
        if (!modules[currentModuleIndex].canShowConditions) { return; }

        isConditionsShown = true;

        mainAnim.btnConditions.removeEventListener('mouseover', OnOverConditions);
        mainAnim.btnConditions.addEventListener('mouseout', OnOutConditions);

        mainAnim.screenConditions.gotoAndPlay('show');
    }

    function OnOutConditions() {
        isConditionsShown = false;

        mainAnim.btnConditions.removeEventListener('mouseout', OnOutConditions);
        mainAnim.btnConditions.addEventListener('mouseover', OnOverConditions);

        mainAnim.screenConditions.gotoAndPlay('hide');
    }
}